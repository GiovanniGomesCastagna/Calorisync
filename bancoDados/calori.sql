--
-- Arquivo gerado com SQLiteStudio v3.4.17 em qui ago 21 20:23:48 2025
--
-- Codificaç?o de texto usada: ISO-8859-2
--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Tabela: CADASTRO_ALIMENTOS
DROP TABLE IF EXISTS CADASTRO_ALIMENTOS;

CREATE TABLE IF NOT EXISTS CADASTRO_ALIMENTOS (
    ID_ALIMENTO      INTEGER PRIMARY KEY
                             NOT NULL,
    NOME_ALIMENTO    TEXT,
    CALORIA_ALIMENTO REAL,
    PESO_ALIMENTO_G  REAL
);


-- Tabela: EXERCICIOS
DROP TABLE IF EXISTS EXERCICIOS;

CREATE TABLE IF NOT EXISTS EXERCICIOS (
    ID_EXERCICIO         INTEGER PRIMARY KEY
                                 NOT NULL,
    NOME_EXERCICIO       TEXT,
    CALORIAS_QUEIMADAS   REAL,
    FREQUENCIA_EXERCICIO INTEGER,
    REPETICAO_EXERCICIO  INTEGER,
    SERIE_EXERCICIO      INTEGER
);


-- Tabela: HISTORICO_CALORIAS
DROP TABLE IF EXISTS HISTORICO_CALORIAS;

CREATE TABLE IF NOT EXISTS HISTORICO_CALORIAS (
    ID_CARDAPIO     INTEGER PRIMARY KEY
                            NOT NULL,
    ID_ALIMENTO     INTEGER,
    PESO_ALIMENTO   REAL,
    CALORIAS_GASTAS REAL,
    FOREIGN KEY (
        ID_ALIMENTO
    )
    REFERENCES CADASTRO_ALIMENTOS (ID_ALIMENTO) 
);


-- Tabela: JUNCAO_ALIMENTOS
DROP TABLE IF EXISTS JUNCAO_ALIMENTOS;

CREATE TABLE IF NOT EXISTS JUNCAO_ALIMENTOS (
    ID_JUNCAO             INTEGER PRIMARY KEY
                                  NOT NULL,
    ID_CARDAPIO           INTEGER,
    ID_ALIMENTO           INTEGER,
    CALORIA_ALIMENTO      REAL,
    PESO_ALIMENTO_G       REAL,
    PESO_ALIMENTO_RECEITA REAL,
    FOREIGN KEY (
        ID_CARDAPIO
    )
    REFERENCES RECEITA (ID_CARDAPIO),
    FOREIGN KEY (
        ID_ALIMENTO
    )
    REFERENCES CADASTRO_ALIMENTOS (ID_ALIMENTO) 
);


-- Tabela: LISTA_TREINO
DROP TABLE IF EXISTS LISTA_TREINO;

CREATE TABLE IF NOT EXISTS LISTA_TREINO (
    ID_LISTA              INTEGER PRIMARY KEY
                                  NOT NULL,
    ID_EXERCICIO          INTEGER,
    ID_CARDAPIO           INTEGER,
    NOME_EXERCICIO        TEXT,
    CALORIAS_QUEIMADAS    REAL,
    FREQUENCIA_EXERCICIOS INTEGER,
    REPETICAO_EXERCICIO   INTEGER,
    SERIE_EXERCICIO       INTEGER,
    FOREIGN KEY (
        ID_EXERCICIO
    )
    REFERENCES EXERCICIOS (ID_EXERCICIO),
    FOREIGN KEY (
        ID_CARDAPIO
    )
    REFERENCES RECEITA (ID_CARDAPIO) 
);


-- Tabela: RECEITA
DROP TABLE IF EXISTS RECEITA;

CREATE TABLE IF NOT EXISTS RECEITA (
    ID_CARDAPIO           INTEGER PRIMARY KEY
                                  NOT NULL,
    CALORIAS_CONSUMIDAS   REAL,
    PESO_ALIMENTO_RECEITA REAL
);

INSERT INTO RECEITA (ID_CARDAPIO, CALORIAS_CONSUMIDAS, PESO_ALIMENTO_RECEITA) VALUES (1, 10.0, 1.0);

-- Tabela: USUARIOS
DROP TABLE IF EXISTS USUARIOS;

CREATE TABLE IF NOT EXISTS USUARIOS (
    ID_USUARIO INTEGER  PRIMARY KEY
                        NOT NULL,
    NOME       TEXT,
    CPF        TEXT,
    CNPJ       TEXT,
    TIPO_CONTA TEXT     NOT NULL,
    CNR        TEXT,
    SENHA      TEXT     NOT NULL
                        DEFAULT '',
    SEXO       CHAR (1) 
);

INSERT INTO USUARIOS (ID_USUARIO, NOME, CPF, CNPJ, TIPO_CONTA, CNR, SENHA, SEXO) VALUES (1, 'Calori', '666666', NULL, 'j', 'crn-9999', '123', 'M');
INSERT INTO USUARIOS (ID_USUARIO, NOME, CPF, CNPJ, TIPO_CONTA, CNR, SENHA, SEXO) VALUES (2, 'Erivelton', '99999999999', '', 'F', '', '123', 'M');
INSERT INTO USUARIOS (ID_USUARIO, NOME, CPF, CNPJ, TIPO_CONTA, CNR, SENHA, SEXO) VALUES (3, 'Erivelton', '', '99999999999999', 'J', '', '123', '');

COMMIT TRANSACTION;
PRAGMA foreign_keys = on;
