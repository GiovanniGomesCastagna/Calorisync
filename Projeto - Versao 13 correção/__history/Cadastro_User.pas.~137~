unit Cadastro_User;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Data.DB,
  Vcl.Grids, Vcl.DBGrids, Vcl.ExtCtrls, Vcl.Mask,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error,
  FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async,
  FireDAC.DApt, FireDAC.Comp.DataSet, FireDAC.Comp.Client, Conexao,
  Pesquisa_Usuario,
  Vcl.Imaging.pngimage;

type
  TCadastro_Usuario = class(TForm)
    Nome_Razao_social: TLabel;
    Inserir_nome: TEdit;
    Digite_CRN: TMaskEdit;
    Digite_Senha: TEdit;
    CNPJ: TRadioButton;
    CPF: TRadioButton;
    Nao_CRN: TRadioButton;
    Sim_CRN: TRadioButton;
    Senha: TLabel;
    CRN_SIM_NAO: TLabel;
    Cadastrar: TButton;
    Painel_Cad: TPanel;
    Sexo: TLabel;
    Masculino: TRadioButton;
    Feminino: TRadioButton;
    Documentos: TLabel;
    Inserir_CPF_CNPJ: TMaskEdit;
    FDQuery1: TFDQuery;
    CRN_Panel: TPanel;
    Sxo_Panel: TPanel;
    Image1: TImage;
    Image2: TImage;
    Image3: TImage;
    Image4: TImage;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormResize(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure CPFClick(Sender: TObject);
    procedure CNPJClick(Sender: TObject);
    procedure Sim_CRNClick(Sender: TObject);
    procedure Nao_CRNClick(Sender: TObject);
    procedure CadastrarClick(Sender: TObject);
    procedure LimparCampos;
    procedure BtnPesquisarUsuarioClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure Inserir_CPF_CNPJChange(Sender: TObject);
  private
    procedure CentralizarPainel;
    function RetirarMascara(const Valor: string): string;
    function SexoSelecionado: string;
  public
  end;

var
  Cadastro_Usuario: TCadastro_Usuario;

implementation

{$R *.dfm}

// ------------------------------------------------------------------------------
// Método para pesquisar usuário existente
// ------------------------------------------------------------------------------
procedure TCadastro_Usuario.BtnPesquisarUsuarioClick(Sender: TObject);
begin
  with TFormPesquisaUsuario.Create(Self) do
    try
      if ShowModal = mrOk then
      begin
        Inserir_nome.Text := NomeSelecionado;
        Digite_Senha.Text := SenhaSelecionada;
        Inserir_CPF_CNPJ.Text := DocumentoSelecionado;

        if Length(RetirarMascara(DocumentoSelecionado)) = 11 then
          CPF.Checked := True
        else
          CNPJ.Checked := True;
      end;
    finally
      Free;
    end;
end;

// ------------------------------------------------------------------------------
// Método para cadastrar usuário, com validação de duplicidade CPF/CNPJ
// ------------------------------------------------------------------------------
procedure TCadastro_Usuario.CadastrarClick(Sender: TObject);
var
  vNome, vCPF, vCNPJ, vTipoConta, vCNR, vSenha, vSexo: string;
  vCount: Integer;
begin
  if Trim(Inserir_nome.Text) = '' then
  begin
    MessageDlg('O campo Nome/Razão Social é obrigatório.', mtWarning,
      [mbOK], 0);
    Inserir_nome.SetFocus;
    Exit;
  end;

  if Trim(Digite_Senha.Text) = '' then
  begin
    MessageDlg('O campo Senha é obrigatório.', mtWarning, [mbOK], 0);
    Digite_Senha.SetFocus;
    Exit;
  end;

  vNome := Trim(Inserir_nome.Text);
  vSenha := Digite_Senha.Text;
  vSexo := SexoSelecionado;
  vCNR := '';
  vCPF := '';
  vCNPJ := '';

  if CPF.Checked then
  begin
    vTipoConta := 'F';
    vCPF := RetirarMascara(Inserir_CPF_CNPJ.Text);
    if Length(vCPF) <> 11 then
    begin
      MessageDlg('O CPF informado é inválido.', mtWarning, [mbOK], 0);
      Inserir_CPF_CNPJ.SetFocus;
      Exit;
    end;
  end
  else if CNPJ.Checked then
  begin
    vTipoConta := 'J';
    vCNPJ := RetirarMascara(Inserir_CPF_CNPJ.Text);
    if Length(vCNPJ) <> 14 then
    begin
      MessageDlg('O CNPJ informado é inválido.', mtWarning, [mbOK], 0);
      Inserir_CPF_CNPJ.SetFocus;
      Exit;
    end;
    vSexo := ''; // não grava sexo para PJ
  end
  else
  begin
    MessageDlg('Selecione um tipo de documento (CPF ou CNPJ).', mtWarning,
      [mbOK], 0);
    Exit;
  end;

  // 🔎 Validar CRN apenas se Sim_CRN estiver marcado
  vCNR := '';
  if Sim_CRN.Checked then
  begin
    if Trim(Digite_CRN.Text) = '' then
    begin
      MessageDlg('O campo CRN é obrigatório.', mtWarning, [mbOK], 0);
      Digite_CRN.SetFocus;
      Exit;
    end;
    vCNR := Trim(Digite_CRN.Text);
  end;
  vCNR := Trim(Digite_CRN.Text);

  try
    // 🔎 Verificar duplicidade no banco
    FDQuery1.Close;
    FDQuery1.SQL.Clear;
    FDQuery1.SQL.Add('SELECT COUNT(*) AS QTD FROM USUARIOS');
    FDQuery1.SQL.Add
      ('WHERE (CPF = :CPF AND :CPF <> '''') OR (CNPJ = :CNPJ AND :CNPJ <> '''')');
    FDQuery1.ParamByName('CPF').AsString := vCPF;
    FDQuery1.ParamByName('CNPJ').AsString := vCNPJ;
    FDQuery1.Open;

    vCount := FDQuery1.FieldByName('QTD').AsInteger;
    if vCount > 0 then
    begin
      MessageDlg('Cadastro já existente para este CPF/CNPJ.', mtWarning,
        [mbOK], 0);
      Exit;
    end;

    // 🚀 Inserir no banco
    FDQuery1.Close;
    FDQuery1.SQL.Clear;
    FDQuery1.SQL.Add
      ('INSERT INTO USUARIOS (NOME, CPF, CNPJ, TIPO_CONTA, CNR, SENHA, SEXO)');
    FDQuery1.SQL.Add
      ('VALUES (:NOME, :CPF, :CNPJ, :TIPO_CONTA, :CNR, :SENHA, :SEXO)');
    FDQuery1.ParamByName('NOME').AsString := vNome;
    FDQuery1.ParamByName('CPF').AsString := vCPF;
    FDQuery1.ParamByName('CNPJ').AsString := vCNPJ;
    FDQuery1.ParamByName('TIPO_CONTA').AsString := vTipoConta;
    FDQuery1.ParamByName('CNR').AsString := vCNR;
    FDQuery1.ParamByName('SENHA').AsString := vSenha;
    FDQuery1.ParamByName('SEXO').AsString := vSexo;

    FDQuery1.ExecSQL;

    MessageDlg('Usuário cadastrado com sucesso!', mtConfirmation, [mbOK], 0);
    LimparCampos;

  except
    on E: Exception do
      MessageDlg('Erro ao cadastrar usuário: ' + E.Message, mtWarning,
        [mbOK], 0);
  end;
end;

// ------------------------------------------------------------------------------
// Auxiliares
// ------------------------------------------------------------------------------
procedure TCadastro_Usuario.CentralizarPainel;
begin
  Painel_Cad.Left := (ClientWidth - Painel_Cad.Width) div 2;
  Painel_Cad.Top := (ClientHeight - Painel_Cad.Height) div 2;
end;

procedure TCadastro_Usuario.FormCreate(Sender: TObject);
begin
  Position := poScreenCenter;
  CentralizarPainel;

  CPF.Checked := True;
  Inserir_CPF_CNPJ.EditMask := '000.000.000-00;0;_';
  Inserir_CPF_CNPJ.ReadOnly := False;
  Inserir_CPF_CNPJ.Enabled := True;
  Inserir_CPF_CNPJ.Text := '';

  Nao_CRN.Checked := True;
  Digite_CRN.Clear;
  Digite_CRN.Enabled := False;
  Digite_CRN.ReadOnly := True;
  Digite_CRN.Cursor := crDefault;
  Digite_CRN.Visible := False;
end;

procedure TCadastro_Usuario.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_ESCAPE then
    Close;
end;

procedure TCadastro_Usuario.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  Action := caFree;
  Cadastro_Usuario := nil;
end;

procedure TCadastro_Usuario.FormResize(Sender: TObject);
begin
  CentralizarPainel;
end;

procedure TCadastro_Usuario.Inserir_CPF_CNPJChange(Sender: TObject);
var
  vCPF: string;
begin
  if CPF.Checked then
  begin
    vCPF := RetirarMascara(Inserir_CPF_CNPJ.Text);

    if Length(vCPF) = 11 then
    begin
      try
        FDQuery1.Close;
        FDQuery1.SQL.Clear;
        FDQuery1.SQL.Add('SELECT NOME, SENHA, SEXO, CNR FROM USUARIOS WHERE CPF = :CPF');
        FDQuery1.ParamByName('CPF').AsString := vCPF;
        FDQuery1.Open;

        if not FDQuery1.Eof then
        begin
          Inserir_nome.Text := FDQuery1.FieldByName('NOME').AsString;
          Digite_Senha.Text := FDQuery1.FieldByName('SENHA').AsString;

          // CORRIGIDO: Usar if/else para strings
          if FDQuery1.FieldByName('SEXO').AsString = 'M' then
            Masculino.Checked := True
          else if FDQuery1.FieldByName('SEXO').AsString = 'F' then
            Feminino.Checked := True
          else
          begin
            Masculino.Checked := False;
            Feminino.Checked := False;
          end;

          if FDQuery1.FieldByName('CNR').AsString <> '' then
          begin
            Sim_CRN.Checked := True;
            Digite_CRN.Enabled := True;
            Digite_CRN.ReadOnly := False;
            Digite_CRN.Text := FDQuery1.FieldByName('CNR').AsString;
            Digite_CRN.Visible := True;
          end
          else
          begin
            Nao_CRN.Checked := True;
            Digite_CRN.Clear;
            Digite_CRN.Enabled := False;
            Digite_CRN.ReadOnly := True;
            Digite_CRN.Visible := False;
          end;

          MessageDlg('CPF já cadastrado. Dados carregados.', mtInformation, [mbOK], 0);
          Inserir_nome.SetFocus;
        end;

      except
        on E: Exception do
          MessageDlg('Erro ao consultar CPF: ' + E.Message, mtWarning, [mbOK], 0);
      end;
    end;
  end;
end;




procedure TCadastro_Usuario.CPFClick(Sender: TObject);
begin
  Inserir_CPF_CNPJ.EditMask := '000.000.000-00;0;_';
  Inserir_CPF_CNPJ.ReadOnly := False;
  Inserir_CPF_CNPJ.Enabled := True;
  Inserir_CPF_CNPJ.Text := '';
  Inserir_CPF_CNPJ.Visible := True;
  Inserir_CPF_CNPJ.SetFocus;
  Inserir_CPF_CNPJ.SelStart := 0;

  Masculino.Visible := True;
  Feminino.Visible := True;
  Sexo.Visible := True;
  Sxo_Panel.Visible := True;
end;

procedure TCadastro_Usuario.CNPJClick(Sender: TObject);
begin
  Inserir_CPF_CNPJ.EditMask := '00.000.000/0000-00;0;_';
  Inserir_CPF_CNPJ.ReadOnly := False;
  Inserir_CPF_CNPJ.Enabled := True;
  Inserir_CPF_CNPJ.Text := '';
  Inserir_CPF_CNPJ.Visible := True;
  Inserir_CPF_CNPJ.SetFocus;
  Inserir_CPF_CNPJ.SelStart := 0;

  Masculino.Visible := False;
  Feminino.Visible := False;
  Sexo.Visible := False;
  Sxo_Panel.Visible := False;
end;

procedure TCadastro_Usuario.Sim_CRNClick(Sender: TObject);
begin
  Digite_CRN.EditMask := '';
  Digite_CRN.ReadOnly := False;
  Digite_CRN.Enabled := True;
  Digite_CRN.Text := '';
  Digite_CRN.SelStart := Length(Digite_CRN.Text);
  Digite_CRN.Cursor := crIBeam;
  Digite_CRN.Visible := True;
end;

procedure TCadastro_Usuario.Nao_CRNClick(Sender: TObject);
begin
  Digite_CRN.Clear;
  Digite_CRN.ReadOnly := True;
  Digite_CRN.Enabled := False;
  Digite_CRN.Cursor := crDefault;
  Digite_CRN.Visible := False;
end;

function TCadastro_Usuario.RetirarMascara(const Valor: string): string;
var
  i: Integer;
  c: Char;
  Resultado: string;
begin
  Resultado := '';
  for i := 1 to Length(Valor) do
  begin
    c := Valor[i];
    if CharInSet(c, ['0' .. '9']) then
      Resultado := Resultado + c;
  end;
  Result := Resultado;
end;

function TCadastro_Usuario.SexoSelecionado: string;
begin
  if Masculino.Checked then
    Result := 'M'
  else if Feminino.Checked then
    Result := 'F'
  else
    Result := '';
end;

procedure TCadastro_Usuario.LimparCampos;
begin
  Inserir_nome.Clear;
  Digite_Senha.Clear;
  Inserir_CPF_CNPJ.Clear;
  Digite_CRN.Clear;

  CPF.Checked := True;
  Nao_CRN.Checked := True;
  Masculino.Checked := False;
  Feminino.Checked := False;

  Inserir_CPF_CNPJ.EditMask := '000.000.000-00;0;_';
  Inserir_CPF_CNPJ.Enabled := True;
  Inserir_CPF_CNPJ.ReadOnly := False;

  Digite_CRN.Enabled := False;
  Digite_CRN.ReadOnly := True;
  Digite_CRN.Cursor := crDefault;

  Inserir_nome.SetFocus;
end;

end.
